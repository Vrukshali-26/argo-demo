name: Build and Deploy to AKS

on: push

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: demo
    env:
      CLIENT_ENVIRONMENT: demo
      K8S_CLUSTER: tf-ause-demo
      RESOURCE_GROUP_NAME: tf-demo
      CLOUD_LOCATION_1: Australia Southeast
      HELM_VERSION: 3.7.1
      HELM_SECRETS_VERSION: 3.11.0
      HELMFILE_VERSION: 0.142.0
      KUBECTL_VERSION: 1.22.4
      ARGOCD_CLI_VERSION: v2.1.7
      ARGO_DESTINATION_CLUSTER_SERVER: https://argocd.bradmccoy.io
      MICROSOFT_CLIENT_SECRET: ${{ secrets.MICROSOFT_CLIENT_SECRET }}
      ARGO_SECRET_KEY: ${{ secrets.ARGO_SECRET_KEY }}
      ARGO_ADMIN_PASSWORD: ${{ secrets.ARGO_ADMIN_PASSWORD }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.K8S_CLUSTER }}
        resource-group: ${{ env.RESOURCE_GROUP_NAME }}

    # Install Helm3
    - name: Install Helm3
      uses: azure/setup-helm@v1
      with:
        version: v3.6.1

    # Set up Helm3
    - name: Set up Helm3
      run: |-
        helm repo add incubator https://charts.helm.sh/incubator
        helm repo add stable https://charts.helm.sh/stable
        helm plugin install https://github.com/jkroepke/helm-secrets --version ${HELM_SECRETS_VERSION}        

    # Set up Helmfile
    - name: Set up Helmfile
      run: |-
        curl -sfLo helmfile https://github.com/roboll/helmfile/releases/download/v${HELMFILE_VERSION}/helmfile_linux_amd64
        chmod a+x ./helmfile
        
    # Set up Kubectl
    - name: Set up Kubectl
      run: |-
        curl -sfLo kubectl "https://dl.k8s.io/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
        chmod a+x ./kubectl               

    - name: Deploy
      run: |-
        find "kube-infra/" -name "*.tmpl" -exec bash -c 'envsubst < $1 > ${1%.tmpl}' _ {} \;
        ./helmfile --environment demo sync

        kubectl apply -k kube-infra/kustomize/ci-cd/argocd-with-applicationset/overlays/demo

        export ARGO_DESTINATION_CLUSTER_SERVER="$( kubectl config view -o json | jq -r '(.clusters[].cluster.server)' )"
        export ARGO_DESTINATION_CLUSTER_SERVER_CA=$(kubectl config view --raw -o json | jq -r '.clusters[] | select(.name == "'$(kubectl config current-context)'") | .cluster."certificate-authority-data"')
        
    # - name: Set up argocd CLI
    #   run: |-
    #     curl -sfLo argocd "https://github.com/argoproj/argo-cd/releases/download/$ARGOCD_CLI_VERSION/argocd-linux-amd64"
    #     chmod a+x argocd 
    #     ./argocd login argocd.bradmccoy.io --username admin --password $( kubectl get secrets argocd-initial-admin-secret -o json -n ci-cd | jq -r '(.data.password)' | base64 --decode )
    #     ./argocd cluster add $( kubectl config view -o json | jq -r '(.clusters[].name)' ) --name devops-ause-prod 
